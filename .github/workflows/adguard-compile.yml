name: Compile sing-box Adgaurd Filters

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

jobs:
  compile-adguard-srs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Necessary Tools
        run: |
          sudo apt install -y curl wget git

      - name: Install sing-box
        run: |
          sudo curl -fsSL https://sing-box.app/gpg.key -o /etc/apt/keyrings/sagernet.asc
          sudo chmod a+r /etc/apt/keyrings/sagernet.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/sagernet.asc] https://deb.sagernet.org/ * *" | \
          sudo tee /etc/apt/sources.list.d/sagernet.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y sing-box-beta

      - name: Prepare Folders
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          mkdir -p adguard

      - name: Download Adguard Filters
        run: |
          curl -fsSL https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt | sed 's/||nstool.netease.com^//g' > adguard.txt

      - name: Compile Adguard Source
        run: |
          sing-box rule-set convert --type adguard --output adguard/adguard.srs adguard.txt

      - name: Push Files
        run: |
          echo "Force updating repository with local content..."
          git checkout -b Release
          git add adguard
          git commit -m "Update srs files"
          git push --force origin Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create tag
        id: create_tag
        run: |
          TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, deleting it from remote."
            git push --delete origin "$TAG_NAME"
            while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
              echo "Waiting for tag $TAG_NAME to be deleted..."
              sleep 5
            done
          fi
          git tag $TAG_NAME
          git push --force origin $TAG_NAME
          echo "::set-output name=TAG_NAME::$TAG_NAME"

      - name: Create release
        id: create_release
        run: |
          TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
          RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Release $TAG_NAME already exists, deleting it."
            gh release delete "$TAG_NAME" --yes
          fi
          gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" geosite/*.srs geoip/*.srs adguard/*.srs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
